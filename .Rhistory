by=list(Year = data1$Year,
Location = data1$Location),
FUN=mean)
# combine with location info
locvars <- c('Location', 'Latitude', 'Longitude', 'Site_Name',
'DoubleCountLocation', 'IsOneway', 'OnewayDirection',
'IsSidewalk')
outdata <- merge(outdata, locdata[,locvars], by = 'Location')
for(loc in unique(outdata$Location)){
years <- sort(unique(outdata[outdata$Location == loc,"Year"]))
for(yr in years){
if(yr==min(years)){
outdata[outdata$Location==loc & outdata$Year==yr,"Growth"] <- NA
}else{
i <- which(years==yr)
x1 <- outdata[outdata$Location==loc & outdata$Year==yr,"BPH"]
x2 <- outdata[outdata$Location==loc & outdata$Year==years[i-1],"BPH"]
n <- yr - years[i-1]
outdata[outdata$Location==loc & outdata$Year==yr,"Growth"] <- (x1-x2)/(n*x2)
}
}
}
outspdf <- df2spdf(outdata, 'Longitude', 'Latitude')
head(outdata)
summary(outdata$BPH)
# load libraries
library(readxl)
library(lubridate)
library(rgdal)
library(RColorBrewer)
library(classInt)
options(warn = -1)
inpath <- 'T:/Data/COUNTS/Nonmotorized Counts/Summary Tables/Bicycle/'
outpath <- "T:/DCProjects/StoryMap/BikeCounting"
data <- read.csv(paste0(inpath, 'Bicycle_HourlyForTableau.csv'))
data$Date <- as.Date(data$Date, "%Y-%m-%d")
locdata <- read.csv("T:/Data/COUNTS/Nonmotorized Counts/Supporting Data/Supporting Bicycle Data/CountLocationInformation.csv")
MPOBound <- readOGR(dsn = "V:/Data/Transportation", layer="MPO_Bound")
# require MPOBound
df2spdf <- function(df, lon_col_name, lat_col_name, trans = TRUE){
lonlat <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
lon_col_no <- which(names(df)==lon_col_name)
lat_col_no <- which(names(df)==lat_col_name)
xy <- data.frame(df[,c(lon_col_no,lat_col_no)])
coordinates(xy) <- c(lon_col_name, lat_col_name)
proj4string(xy) <- lonlat
spdf <- sp::SpatialPointsDataFrame(coords = xy, data = df)
if(trans){
spdf <- spTransform(spdf, CRS(proj4string(MPOBound)))
}
return(spdf)
}
# use only the total direction
data1 <- data[(!is.na(data$Hourly_Count)) & (data$Direction == 'Total'),]
# aggregate the mean by year and location
outdata <- aggregate(x=list(BPH = data1$Hourly_Count),
by=list(Year = data1$Year,
Location = data1$Location),
FUN=mean)
# combine with location info
locvars <- c('Location', 'Latitude', 'Longitude', 'Site_Name',
'DoubleCountLocation', 'IsOneway', 'OnewayDirection',
'IsSidewalk')
outdata <- merge(outdata, locdata[,locvars], by = 'Location')
for(loc in unique(outdata$Location)){
years <- sort(unique(outdata[outdata$Location == loc,"Year"]))
for(yr in years){
if(yr==min(years)){
outdata[outdata$Location==loc & outdata$Year==yr,"Growth"] <- NA
}else{
i <- which(years==yr)
x1 <- outdata[outdata$Location==loc & outdata$Year==yr,"BPH"]
x2 <- outdata[outdata$Location==loc & outdata$Year==years[i-1],"BPH"]
n <- yr - years[i-1]
outdata[outdata$Location==loc & outdata$Year==yr,"Growth"] <- (x1-x2)/(n*x2)
}
}
}
outspdf <- df2spdf(outdata, 'Longitude', 'Latitude')
head(outdata)
head(df1)
head(df2)
tail(df2)
# This script was created to organize bike share trips data
# By Dongmei Chen (dchen@lcog.org)
# On January 23th, 2022
library(lubridate)
inpath <- "T:/DCProjects/StoryMap/BikeCounting/BikeShare/Data/Trips"
files <- list.files(inpath)
selected_vars <- c('User.ID', 'Route.ID', 'Start.Hub',
'Start.Latitude', 'Start.Longitude',
'Start.Date', 'Start.Time',
'End.Hub', 'End.Latitude', 'End.Longitude',
'End.Date', 'End.Time', 'Bike.ID', 'Bike.Name',
'Distance..Miles.', 'Duration')
#test <- read.csv("T:/DCProjects/StoryMap/BikeCounting/BikeShare/Data/trips_2019-05-01_2019-05-31.csv")
organize_points <- function(file){
trips <- read.csv(paste0(inpath, "/", file))
org <- trips[,c('Route.ID', 'Bike.ID', 'User.ID',
'Start.Hub', 'Start.Latitude', 'Start.Longitude',
'Start.Date', 'Start.Time')]
names(org) <- c("RouteID", "BikeID", 'UserID',
"Location", "Latitude", "Longitude",
"Date", "Time")
org$OriginDestination <- rep("Origin", dim(org)[1])
dst <- trips[,c('Route.ID', 'Bike.ID', 'User.ID', 'End.Hub',
'End.Latitude', 'End.Longitude',
'End.Date','End.Time')]
names(dst) <- c("RouteID", "BikeID", 'UserID',
"Location", "Latitude", "Longitude",
"Date", "Time")
dst$OriginDestination <- rep("Destination", dim(dst)[1])
df <- rbind(org, dst)
return(df)
}
toMinutes <- function(x){
h <- as.numeric(strsplit(x, ":")[[1]][1])
m <- as.numeric(strsplit(x, ":")[[1]][2])
s <- as.numeric(strsplit(x, ":")[[1]][3])
res <- h*60 + m + s/60
return(res)
}
for(file in files){
if(file == files[1]){
df1 <- read.csv(paste0(inpath, "/", file))
df1 <- df1[selected_vars]
df2 <- organize_points(file)
}else{
ndf1 <- read.csv(paste0(inpath, "/", file))
if(file=='trips_peace_health_rides_05_01_2019-05_31_2019.csv'){
colnames(ndf1)[which(colnames(ndf1)=='Distance')] <- "Distance..Miles."
}
ndf1 <- ndf1[selected_vars]
df1 <- rbind(df1, ndf1)
ndf2 <- organize_points(file)
df2 <- rbind(df2, ndf2)
}
print(file)
}
df1$Start.Date <- as.Date(df1$Start.Date, format = "%Y-%m-%d")
df1$Minutes <- unlist(lapply(df1$Duration, function(x) toMinutes(x)))
write.csv(df1, "T:/DCProjects/StoryMap/BikeCounting/BikeShare/Data/trips_all.csv",
row.names=FALSE)
write.csv(df2, "T:/DCProjects/StoryMap/BikeCounting/BikeShare/Data/trips_org_dst.csv",
row.names=FALSE)
# trips and duration by year
df_trips <- transform(aggregate(x=list(Trips = df1$Route.ID),
by=list(Year = year(df1$Start.Date)),
FUN=function(x) length(unique(x))),
Growth=ave(Trips,FUN=function(x) c(NA, diff(x)/x[-length(x)])))
df_trips
df_users <- transform(aggregate(x=list(Users = df1$User.ID),
by=list(Year = year(df1$Start.Date)),
FUN=function(x) length(unique(x))),
Growth=ave(Users,FUN=function(x) c(NA, diff(x)/x[-length(x)])))
df_users
df_duration <- transform(aggregate(x=list(Duration = df1$Minutes),
by=list(Year = year(df1$Start.Date)),
FUN=mean),
Growth=ave(Duration,FUN=function(x) c(NA, diff(x)/x[-length(x)])))
df_duration
head(df2)
head(df1)
class(df1$Start.Time)
########################################### Select Stations ##################################################
df3 <- df2[df2$OriginDestination == "Origin", ]
site <- df3$Location
as.data.frame(table(site))
df <- as.data.frame(table(site))
df
df[order(df$Freq),]
head(df2)
summary(df2$Location)
unique(df2$Location)
df4 <- df3[df3$Location != "",]
site <- df4$Location
df <- as.data.frame(table(site))
df[order(df$Freq),]
for(i in unique(df4$RouteID)){
idx1 = ((df['RouteID'] == i) & (df['OriginDestination'] =='Origin'))
idx2 = ((df['RouteID'] == i) & (df['OriginDestination'] =='Destination'))
pathID = df4[idx1, 'Location'] + ' - ' + df4[idx2, 'Location']
df4[idx1, 'PathID'] = pathID
df4[idx2, 'PathID'] = pathID
}
df4 <- df3[df3$Location != "",]
for(i in unique(df4$RouteID)){
idx1 = (df4$RouteID == i) & (df4$OriginDestination == 'Origin')
idx2 = (df4$RouteID == i) & (df4$OriginDestination == 'Destination')
pathID = df4[idx1, 'Location'] + ' - ' + df4[idx2, 'Location']
df4[idx1, 'PathID'] = pathID
df4[idx2, 'PathID'] = pathID
}
df4 <- df3[df3$Location != "",]
for(i in unique(df4$RouteID)){
idx1 = (df4$RouteID == i) & (df4$OriginDestination == 'Origin')
idx2 = (df4$RouteID == i) & (df4$OriginDestination == 'Destination')
pathID = paste(df4[idx1, 'Location'], ' - ', df4[idx2, 'Location'])
df4[idx1, 'PathID'] = pathID
df4[idx2, 'PathID'] = pathID
}
head(df4)
install.packages("ggmap")
install.packages("tmaptools")
install.packages("RCurl")
install.packages("jsonlite")
install.packages("tidyverse")
install.packages("leaflet")
library(ggmap)
library(tmaptools)
library(RCurl)
library(jsonlite)
library(tidyverse)
library(leaflet)
install.packages("rjson")
install.packages("rjson")
library(rjson)
library(ggmap)
library(tmaptools)
library(RCurl)
library(jsonlite)
library(tidyverse)
library(leaflet)
pwd()
getwd()
# replace "api_key" with your API key
setwd("T:/DCProjects/GitHub/BikeCounting")
fromJSON("../config/keys.json")
fromJSON("/config/keys.json")
fromJSON("config/keys.json")
fromJSON("config/keys.json")$google_maps$APIKEY
api_key <- fromJSON("config/keys.json")$google_maps$APIKEY
register_google(key = api_key)
pubs <- c("The Angel, Bermondsey",
"The Churchill Arms, Notting Hill",
"The Auld Shillelagh, Stoke Newington",
"The Sekforde, Clerkenwell",
"The Dove, Hammersmith",
"The Crown and Sugar Loaf, Fleet Street",
"The Lamb, Holborn",
"Prince of Greenwich, Greenwich",
"Ye Olde Mitre, Hatton Garden",
"The Glory, Haggerston",
"The Blue Posts, Soho",
"The Old Bank of England, Fleet Street")
pubs_df <- data.frame(Pubs = pubs, stringsAsFactors = FALSE)
pubs_ggmap <- geocode(location = pubs, output = "more", source = "google")
pubs_ggmap <- cbind(pubs_df, pubs_ggmap)
pubs_ggmap[, 1:6]
pubs_ggmap
api_key <- fromJSON("config/keys.json")$google_maps$APIKEY
pubs_df
pubs_ggmap <- geocode(location = pubs, output = "more", source = "google")
pubs_ggmap <- geocode(location = pubs, output = "more", source = "google")
api_key <- fromJSON("config/keys.json")$google_maps$APIKEY
register_google(key = api_key)
pubs <- c("The Angel, Bermondsey",
"The Churchill Arms, Notting Hill",
"The Auld Shillelagh, Stoke Newington",
"The Sekforde, Clerkenwell",
"The Dove, Hammersmith",
"The Crown and Sugar Loaf, Fleet Street",
"The Lamb, Holborn",
"Prince of Greenwich, Greenwich",
"Ye Olde Mitre, Hatton Garden",
"The Glory, Haggerston",
"The Blue Posts, Soho",
"The Old Bank of England, Fleet Street")
pubs_df <- data.frame(Pubs = pubs, stringsAsFactors = FALSE)
pubs_ggmap <- geocode(location = pubs, output = "more", source = "google")
pubs_ggmap <- cbind(pubs_df, pubs_ggmap)
pubs_ggmap[, 1:6]
pubs_ggmap_crd <- list()
for (i in 1:dim(pubs_ggmap)[1]) {
lon <- pubs_ggmap$lon[i]
lat <- pubs_ggmap$lat[i]
pubs_ggmap_crd[[i]] <- c(lon, lat)
}
pubs_ggmap_address <- list()
for (i in 1:length(pubs_ggmap_crd)) {
pub <- pubs[i]
crd <- pubs_ggmap_crd[[i]]
address <- revgeocode(location = crd, output = "address")
pubs_ggmap_address[[i]] <- list(pub, crd, address)
}
pubs_ggmap_address[[1]]
pubs_ggmap_address[[1]][[3]]
pubs_m <- pubs
pubs_m[pubs_m=="The Crown and Sugar Loaf, Fleet Street"] <- "The Crown and Sugar Loaf"
pubs_m[pubs_m=="Ye Olde Mitre, Hatton Garden"] <- "Ye Olde Mitre"
pubs_m_df <- data.frame(Pubs = pubs_m, stringsAsFactors = FALSE)
pubs_tmaptools <- geocode_OSM(paste(pubs_m, "bar", sep = " "),
details = TRUE, as.data.frame = TRUE)
pubs_m
pubs_tmaptools
pubs_s <- pubs_m[!pubs_m %in% "The Glory, Haggerston"]
pubs_s
pubs_tmaptools_crd <- list()
for (i in 1:dim(pubs_tmaptools)[1]) {
lon <- pubs_tmaptools$lon[i]
lat <- pubs_tmaptools$lat[i]
pubs_tmaptools_crd[[i]] <- c(lon, lat)
}
pubs_tmaptools_address <- list()
for (i in 1:length(pubs_tmaptools_crd)) {
pub <- pubs_s[i]
crd <- pubs_tmaptools_crd[[i]]
address <- rev_geocode_OSM(x = crd[1], y = crd[2],as.data.frame = TRUE)[, c("name")]
pubs_tmaptools_address[[i]] <- list(pub, crd, address)
}
# print the details about the first pub
pubs_tmaptools_address[[1]]
pubs_tmaptools_address[[1]][[3]]
search_query_1_1 <- pubs[1]
search_query_1_2 <- pubs
search_query_1_3 <- as.list(pubs)
search_query_1_4 <- as.matrix(pubs)
search_query_1_5 <- as.data.frame(pubs, stringsAsFactors = FALSE)
search_query_2_1 <- 1
search_query_2_2 <- c(1,2,3)
search_query_2_3 <- list(1,2,3)
search_query_2_4 <- as.matrix(c(1,2,3))
search_query_2_5 <- cbind(as.matrix(pubs), as.matrix(pubs))
search_query_2_6 <- as.data.frame(c(1,2,3))
search_query_2_7 <- data.frame(one = pubs, two = pubs, stringsAsFactors = FALSE)
fields_1_1 <- "all";
fields_1_2 <- "coordinates"
fields_1_3 <- c("all")
fields_1_4 <- c("coordinates", "address", "contacts")
fields_1_5 <- c("all", "all", "all")
fields_1_6 <- c("coordinates", "address", "address", "address")
fields_1_7 <- list("all")
fields_1_8 <- list("coordinates", "address", "contacts")
fields_1_9 <- list("all", "all", "all")
fields_1_10 <- list("contacts", "address", "address", "address")
fields_2_1 <- 1
fields_2_2 <- c(1,2,3)
fields_2_3 <- list(1,2,3)
fields_2_4 <- c("alls")
fields_2_5 <- c("coordinate", "address")
fields_2_6 <- list("alls")
fields_2_7 <- list("address", "contact")
fields_2_8 <- c("all", "coordinates")
fields_2_9 <- c("coordinates", "address", "x", "y")
fields_2_10 <- list("all", "coordinates")
fields_2_11 <- list("coordinates", "x", "y", "z")
key_1_1 <- "xyz"
key_2_1 <- 1
key_2_2 <- c("x", "y", "z")
key_2_3 <- list("x", "y", "z")
# ////////////////////////////////////
# now let's run some tests for SUCCESS
# ////////////////////////////////////
sq_1_1 <- check_arguments(search_query_1_1, "address", "key")
sq_1_2 <- check_arguments(search_query_1_2, "address", "key")
sq_1_3 <- check_arguments(search_query_1_3, "address", "key")
sq_1_4 <- check_arguments(search_query_1_4, "address", "key")
sq_1_5 <- check_arguments(search_query_1_5, "address", "key")
f_1_1 <- check_arguments("search", fields_1_1, "key")
f_1_2 <- check_arguments("search", fields_1_2, "key")
f_1_3 <- check_arguments("search", fields_1_3, "key")
f_1_4 <- check_arguments("search", fields_1_4, "key")
f_1_5 <- check_arguments("search", fields_1_5, "key")
f_1_6 <- check_arguments("search", fields_1_6, "key")
f_1_7 <- check_arguments("search", fields_1_7, "key")
f_1_8 <- check_arguments("search", fields_1_8, "key")
f_1_9 <- check_arguments("search", fields_1_9, "key")
f_1_10 <- check_arguments("search", fields_1_10, "key")
k_1_1 <- check_arguments("search", "address", key_1_1)
# let's check if all the elements in the array below are FALSE
success <- c(sq_1_1[[1]], sq_1_2[[1]], sq_1_3[[1]], sq_1_4[[1]], sq_1_5[[1]],
f_1_1[[1]], f_1_2[[1]], f_1_3[[1]], f_1_4[[1]], f_1_5[[1]],
f_1_6[[1]], f_1_7[[1]], f_1_8[[1]], f_1_9[[1]], f_1_10[[1]],
k_1_1[[1]])
if(length(unique(success)) != 1) {
FALSE
} else if(unique(success) == TRUE) {
FALSE
} else {
TRUE
}
source("T:/DCProjects/GitHub/RLearning/geocoding_functions.R")
search_query_1_1 <- pubs[1]
search_query_1_2 <- pubs
search_query_1_3 <- as.list(pubs)
search_query_1_4 <- as.matrix(pubs)
search_query_1_5 <- as.data.frame(pubs, stringsAsFactors = FALSE)
search_query_2_1 <- 1
search_query_2_2 <- c(1,2,3)
search_query_2_3 <- list(1,2,3)
search_query_2_4 <- as.matrix(c(1,2,3))
search_query_2_5 <- cbind(as.matrix(pubs), as.matrix(pubs))
search_query_2_6 <- as.data.frame(c(1,2,3))
search_query_2_7 <- data.frame(one = pubs, two = pubs, stringsAsFactors = FALSE)
fields_1_1 <- "all";
fields_1_2 <- "coordinates"
fields_1_3 <- c("all")
fields_1_4 <- c("coordinates", "address", "contacts")
fields_1_5 <- c("all", "all", "all")
fields_1_6 <- c("coordinates", "address", "address", "address")
fields_1_7 <- list("all")
fields_1_8 <- list("coordinates", "address", "contacts")
fields_1_9 <- list("all", "all", "all")
fields_1_10 <- list("contacts", "address", "address", "address")
fields_2_1 <- 1
fields_2_2 <- c(1,2,3)
fields_2_3 <- list(1,2,3)
fields_2_4 <- c("alls")
fields_2_5 <- c("coordinate", "address")
fields_2_6 <- list("alls")
fields_2_7 <- list("address", "contact")
fields_2_8 <- c("all", "coordinates")
fields_2_9 <- c("coordinates", "address", "x", "y")
fields_2_10 <- list("all", "coordinates")
fields_2_11 <- list("coordinates", "x", "y", "z")
key_1_1 <- "xyz"
key_2_1 <- 1
key_2_2 <- c("x", "y", "z")
key_2_3 <- list("x", "y", "z")
sq_1_1 <- check_arguments(search_query_1_1, "address", "key")
sq_1_2 <- check_arguments(search_query_1_2, "address", "key")
sq_1_3 <- check_arguments(search_query_1_3, "address", "key")
sq_1_4 <- check_arguments(search_query_1_4, "address", "key")
sq_1_5 <- check_arguments(search_query_1_5, "address", "key")
f_1_1 <- check_arguments("search", fields_1_1, "key")
f_1_2 <- check_arguments("search", fields_1_2, "key")
f_1_3 <- check_arguments("search", fields_1_3, "key")
f_1_4 <- check_arguments("search", fields_1_4, "key")
f_1_5 <- check_arguments("search", fields_1_5, "key")
f_1_6 <- check_arguments("search", fields_1_6, "key")
f_1_7 <- check_arguments("search", fields_1_7, "key")
f_1_8 <- check_arguments("search", fields_1_8, "key")
f_1_9 <- check_arguments("search", fields_1_9, "key")
f_1_10 <- check_arguments("search", fields_1_10, "key")
k_1_1 <- check_arguments("search", "address", key_1_1)
# let's check if all the elements in the array below are FALSE
success <- c(sq_1_1[[1]], sq_1_2[[1]], sq_1_3[[1]], sq_1_4[[1]], sq_1_5[[1]],
f_1_1[[1]], f_1_2[[1]], f_1_3[[1]], f_1_4[[1]], f_1_5[[1]],
f_1_6[[1]], f_1_7[[1]], f_1_8[[1]], f_1_9[[1]], f_1_10[[1]],
k_1_1[[1]])
if(length(unique(success)) != 1) {
FALSE
} else if(unique(success) == TRUE) {
FALSE
} else {
TRUE
}
failure <- c(sq_2_1[[1]], sq_2_2[[1]], sq_2_3[[1]], sq_2_4[[1]], sq_2_5[[1]],
sq_2_6[[1]], sq_2_7[[1]], f_2_1[[1]], f_2_2[[1]], f_2_3[[1]], f_2_4[[1]],
f_2_5[[1]], f_2_6[[1]], f_2_7[[1]], f_2_8[[1]], f_2_9[[1]], f_2_10[[1]],
f_2_11[[1]], k_2_1[[1]], k_2_2[[1]], k_2_3[[1]])
all(failure)
sq_2_1 <- check_arguments(search_query_2_1, "address", "key")
sq_2_2 <- check_arguments(search_query_2_2, "address", "key")
sq_2_3 <- check_arguments(search_query_2_3, "address", "key")
sq_2_4 <- check_arguments(search_query_2_4, "address", "key")
sq_2_5 <- check_arguments(search_query_2_5, "address", "key")
sq_2_6 <- check_arguments(search_query_2_6, "address", "key")
sq_2_7 <- check_arguments(search_query_2_7, "address", "key")
f_2_1 <- check_arguments("search", fields_2_1, "key")
f_2_2 <- check_arguments("search", fields_2_2, "key")
f_2_3 <- check_arguments("search", fields_2_3, "key")
f_2_4 <- check_arguments("search", fields_2_4, "key")
f_2_5 <- check_arguments("search", fields_2_5, "key")
f_2_6 <- check_arguments("search", fields_2_6, "key")
f_2_7 <- check_arguments("search", fields_2_7, "key")
f_2_8 <- check_arguments("search", fields_2_8, "key")
f_2_9 <- check_arguments("search", fields_2_9, "key")
f_2_10 <- check_arguments("search", fields_2_10, "key")
f_2_11 <- check_arguments("search", fields_2_11, "key")
k_2_1 <- check_arguments("search", "address", key_2_1)
k_2_2 <- check_arguments("search", "address", key_2_2)
k_2_3 <- check_arguments("search", "address", key_2_3)
failure <- c(sq_2_1[[1]], sq_2_2[[1]], sq_2_3[[1]], sq_2_4[[1]], sq_2_5[[1]],
sq_2_6[[1]], sq_2_7[[1]], f_2_1[[1]], f_2_2[[1]], f_2_3[[1]], f_2_4[[1]],
f_2_5[[1]], f_2_6[[1]], f_2_7[[1]], f_2_8[[1]], f_2_9[[1]], f_2_10[[1]],
f_2_11[[1]], k_2_1[[1]], k_2_2[[1]], k_2_3[[1]])
all(failure)
failure_sq <- unique(c(sq_2_1[[2]], sq_2_2[[2]], sq_2_3[[2]], sq_2_4[[2]], sq_2_5[[2]],
sq_2_6[[2]], sq_2_7[[2]]))
failure_f <- unique(c(f_2_1[[2]], f_2_2[[2]], f_2_3[[2]], f_2_4[[2]], f_2_5[[2]],
f_2_6[[2]], f_2_7[[2]], f_2_8[[2]], f_2_9[[2]], f_2_10[[2]], f_2_11[[2]]))
failure_k <- unique(c(k_2_1[[2]], k_2_2[[2]], k_2_3[[2]]))
messages <- list(failure_sq, failure_f, failure_k)
messages
cat(check_arguments(c(1,2,3), "contact", 1)[[2]])
source("T:/DCProjects/GitHub/RLearning/geocoding_functions.R")
############################# Building a Map With Leaflet Library ##########################
# copy the data from Nominatim API results
pubs_map <- pubs_nominatim
email <- "dongmeijane1107@gmail.com"
pubs_nominatim <- geocode_nominatim(pubs_m, country = "gb", fields = "all", email = email)
############################# Geocoding Using Google Maps API ##########################
# replace "api_key" with your API key
pubs_google <- geocode_google(pubs, "all", api_key)
# check results
pubs_google
# extract coordinates from pubs_google
pubs_google_crd <- pubs_google[ , c("lat", "lng")]
# replace "api_key" with your API key
pubs_rev_google <- rev_geocode_google(pubs_google_crd, api_key)
pubs_rev_google <- cbind(pubs_df, pubs_rev_google)
pubs_rev_google
email <- "dongmeijane1107@gmail.com"
pubs_nominatim <- geocode_nominatim(pubs_m, country = "gb", fields = "all", email = email)
pubs_nominatim <- geocode_nominatim(pubs_m, country = "gb", fields = "all", email = email)
pubs_nominatim <- geocode_nominatim(pubs_m, country = "gb", fields = "all", email = email)
pubs_nominatim <- geocode_nominatim(pubs, country = "gb", fields = "all", email = email)
############################# Building a Map With Leaflet Library ##########################
# copy the data from Nominatim API results
#pubs_map <- pubs_nominatim
pubs_map <- pubs_google
